/*
 * Created by Ranorex
 * User: Dev
 * Date: 02/06/2022
 * Time: 12:08
 * 
 * To change this template use Tools > Options > Coding > Edit standard headers.
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;


using System.Data;
using System.Data.OleDb;

namespace CworkTestLib
{
	/// <summary>
	/// Creates a Ranorex user code collection. A collection is used to publish user code methods to the user code library.
	/// </summary>
	[UserCodeCollection]
	public class AccesDatabaseMethods
	{
		// You can use the "Insert New User Code Method" functionality from the context menu,
		// to add a new method with the attribute [UserCodeMethod].
		private
			static OleDbConnection conn;
		
		
		/// <summary>
		/// This is a placeholder text. Please describe the purpose of the
		/// user code method here. The method is published to the user code library
		/// within a user code collection.
		/// </summary>
		[UserCodeMethod]
		public static void ClearProdEventTableContents(Int32 cnc)
		{
			try {
				// delete entry in table
				OleDbCommand  maCommande = conn.CreateCommand();
				maCommande.CommandType = CommandType.Text;
				maCommande.CommandText = "DELETE FROM prodeventtable WHERE prodeventhandlecnc = @cnc";
				
				// CNC parameter
				OleDbParameter paramCnc = new OleDbParameter();
				paramCnc.ParameterName = "@cnc";
				paramCnc.DbType = DbType.Int32;
				paramCnc.Direction = ParameterDirection.Input;
				paramCnc.Value = cnc;
				maCommande.Parameters.Add(paramCnc);
				
				maCommande.ExecuteNonQuery();

			} catch (Exception e) {
				throw new Ranorex.ValidationException("Tops could not be StatesTables ", e);
			}
			
		}
		/// <summary>
		/// Open access database conxexion
		/// </summary>
		[UserCodeMethod]
		public static void OpenDatabaseConnexion()
		{
			conn = new OleDbConnection(@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\CworkTestAuto\Database\dnc.mdb");
			try {
				conn.Open();
			} catch (Exception e) {
				throw new Ranorex.ValidationException("Database could not be opened ", e);
			}
			
		}
		/// <summary>
		/// Close Access Db connexion
		/// </summary>
		[UserCodeMethod]
		public static void CloseDatabaseConnexion()
		{
			conn.Close();
		}
		/// <summary>
		/// This is a placeholder text. Please describe the purpose of the
		/// user code method here. The method is published to the user code library
		/// within a user code collection.
		/// </summary>
		[UserCodeMethod]
		public static void InsertProdEventProgram(Int32 cnc, String  prodeventprognam, System.DateTime startDate, System.DateTime EndDate )
		{
			try {
				OleDbCommand  maCommande = conn.CreateCommand();
				maCommande.CommandType = CommandType.Text;
				maCommande.CommandText = "INSERT INTO prodeventtable(prodeventnature,prodeventstart,prodeventend," +
					"prodeventhandlecnc," +
					"prodeventprogname)"+
					"VALUES(@nature,@startDate,@endDate," +
					"@cnc," +
					"@progname)";
				
				// nature parameter
				OleDbParameter paramNature = new OleDbParameter();
				paramNature.ParameterName = "@nature";
				paramNature.DbType = DbType.Int32;
				paramNature.Direction = ParameterDirection.Input;
				paramNature.Value = 1;
				maCommande.Parameters.Add(paramNature);
				
				// startDate parameter
				// On tronque les ms car acces ne les supporte pas.
				System.DateTime MaDateStartDateTronque = new System.DateTime(startDate.Year, startDate.Month,
				                                                             startDate.Day, startDate.Hour,
				                                                             startDate.Minute, startDate.Second);
				OleDbParameter paramStartDate = new OleDbParameter();
				paramStartDate.ParameterName = "@startDate";
				paramStartDate.DbType = DbType.DateTime;
				paramStartDate.Direction = ParameterDirection.Input;
				paramStartDate.Value = MaDateStartDateTronque;
				maCommande.Parameters.Add(paramStartDate);
				
				// endDate parameter
				// On tronque les ms car acces ne les supporte pas.
				System.DateTime MaDateEndDateTronque = new System.DateTime(EndDate.Year, EndDate.Month,
				                                                           EndDate.Day, EndDate.Hour,
				                                                           EndDate.Minute, EndDate.Second);
				OleDbParameter paramEndDate = new OleDbParameter();
				paramEndDate.ParameterName = "@endDate";
				paramEndDate.DbType = DbType.DateTime;
				paramEndDate.Direction = ParameterDirection.Input;
				paramEndDate.Value = MaDateEndDateTronque;
				maCommande.Parameters.Add(paramEndDate);
				
				// CNC parameter
				OleDbParameter paramCnc = new OleDbParameter();
				paramCnc.ParameterName = "@cnc";
				paramCnc.DbType = DbType.Int32;
				paramCnc.Direction = ParameterDirection.Input;
				paramCnc.Value = cnc;
				maCommande.Parameters.Add(paramCnc);
				
				// progname parameter
				OleDbParameter paramPrograme= new OleDbParameter();
				paramPrograme.ParameterName = "@progname";
				paramPrograme.DbType = DbType.AnsiString;
				paramPrograme.Direction = ParameterDirection.Input;
				paramPrograme.Value = prodeventprognam;
				maCommande.Parameters.Add(paramPrograme);
				
				maCommande.ExecuteNonQuery();
			} catch (Exception e) {
				throw new Ranorex.ValidationException("ProdEventProgram could not be created ", e);             }
		}

		[UserCodeMethod]
		public static void InsertTopsEventProgram(Int32 cnc, Int32 State, System.DateTime startDate, System.DateTime EndDate)
		{
			Int32 diffTemps = (Int32)(EndDate - startDate).TotalSeconds;

			try {
				OleDbCommand  maCommande = conn.CreateCommand();
				maCommande.CommandType = CommandType.Text;
				maCommande.CommandText ="INSERT INTO cworktopstable(topcnchandlefield,	topstatehandlefield, topstartdatefield, topcommentfield,topenddatefield,topdurationfield) " +
					"VALUES (@cnc,@State,@startDate,'testRanorex',@endDate,@duration)";
				
				// CNC parameter
				OleDbParameter paramCnc = new OleDbParameter();
				paramCnc.ParameterName = "@cnc";
				paramCnc.DbType = DbType.Int32;
				paramCnc.Direction = ParameterDirection.Input;
				paramCnc.Value = cnc;
				maCommande.Parameters.Add(paramCnc);

				// Handle parameter
				OleDbParameter paramCncState = new OleDbParameter();
				paramCncState.ParameterName = "@State";
				paramCncState.DbType = DbType.Int32;
				paramCncState.Direction = ParameterDirection.Input;
				paramCncState.Value = State;
				maCommande.Parameters.Add(paramCncState);

				// Coment parameter
				/*OleDbParameter paramCncComment = new OleDbParameter();
				paramCncComment.ParameterName = "@comment";
				paramCncComment.DbType = DbType.String;
				paramCncComment.Direction = ParameterDirection.Input;
				paramCncComment.Value = "test";
				maCommande.Parameters.Add(paramCncComment);	*/			
				
				// startDate parameter
				// On tronque les ms car acces ne les supporte pas.
				System.DateTime MaDateStartDateTronque = new System.DateTime(startDate.Year, startDate.Month,
				                                                             startDate.Day, startDate.Hour,
				                                                             startDate.Minute, startDate.Second);
				OleDbParameter paramStartDate = new OleDbParameter();
				paramStartDate.ParameterName = "@startDate";
				paramStartDate.DbType = DbType.DateTime;
				paramStartDate.Direction = ParameterDirection.Input;
				paramStartDate.Value = MaDateStartDateTronque;
				maCommande.Parameters.Add(paramStartDate);
				
				// endDate parameter
				// On tronque les ms car acces ne les supporte pas.
				System.DateTime MaDateEndDateTronque = new System.DateTime(EndDate.Year, EndDate.Month,
				                                                           EndDate.Day, EndDate.Hour,
				                                                           EndDate.Minute, EndDate.Second);
				OleDbParameter paramEndDate = new OleDbParameter();
				paramEndDate.ParameterName = "@endDate";
				paramEndDate.DbType = DbType.DateTime;
				paramEndDate.Direction = ParameterDirection.Input;
				paramEndDate.Value = MaDateEndDateTronque;
				maCommande.Parameters.Add(paramEndDate);

				// duration parameter
				OleDbParameter paramDateDuration = new OleDbParameter();
				paramDateDuration.ParameterName = "@duration";
				paramDateDuration.DbType = DbType.Int32;
				paramDateDuration.Direction = ParameterDirection.Input;
				paramDateDuration.Value = diffTemps;
				maCommande.Parameters.Add(paramDateDuration);
				
				
				maCommande.ExecuteNonQuery();
			} catch (Exception e) {
				throw new Ranorex.ValidationException("ProdEventProgram could not be created ", e);             }
		}

		/// <summary>
		/// This is a placeholder text. Please describe the purpose of the
		/// user code method here. The method is published to the user code library
		/// within a user code collection.
		/// </summary>
		[UserCodeMethod]
		public static void InsertSeveralProdEventProgram(Int32 cnc, Int32 nbEvents)
		{
			System.DateTime MaDateStartDateTronque;
			System.DateTime MaDateEndDateTronque;
			int i;
			MaDateStartDateTronque = new System.DateTime(1, 1, 1, 0, 0, 0);
			MaDateEndDateTronque = new System.DateTime(1, 1, 1, 0, 0, 1);
			
			for (i = 0; i < nbEvents; i++)
			{	
				MaDateStartDateTronque = MaDateStartDateTronque.AddSeconds(1);
				MaDateEndDateTronque = MaDateEndDateTronque.AddSeconds(1);
				InsertProdEventProgram(cnc, "prog"+i.ToString(),MaDateStartDateTronque,MaDateEndDateTronque);
			}
			InsertProdEventProgram(cnc, "prog"+i.ToString(),MaDateStartDateTronque.AddSeconds(1),MaDateStartDateTronque.AddSeconds(1));
		}
		
		[UserCodeMethod]
		public static void insertLotOfstatesInTops(Int32 cnc){
			Int32 states = 0;
			 
			int year = System.DateTime.Now.Year;
				System.DateTime StartDate = new System.DateTime(year, 1, 1);
				System.DateTime EndDate = new System.DateTime(year, 1, 31);
			
			 System.DateTime curentEndPeriodeCursor = StartDate;
			 
			 System.DateTime curentEnd =StartDate.AddSeconds(1260);
			
			for(var day = StartDate.Date; day.Date <= EndDate.Date; day = day.AddMinutes(21)){
				
			 		curentEnd = day.AddMinutes(21);
			 		InsertTopsEventProgram(cnc, states ,day,curentEnd );
			 		if (states < 4){
			 			states++;
			 		}else{
			 			states = 0;
			 		}
				
			};
		}
		
		[UserCodeMethod]
		public static void insertOnestatesInTops(Int32 cnc){
			
			int year = System.DateTime.Now.Year;
				System.DateTime StartDate = new System.DateTime(year, 1, 1);
				System.DateTime EndDate = new System.DateTime(year, 1, 31);
			
			InsertTopsEventProgram(cnc, 1 ,StartDate,EndDate );
			
		}
		
		
	}
}
