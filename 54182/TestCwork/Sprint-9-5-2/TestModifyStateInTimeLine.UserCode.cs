///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Sprint9_5_2
{
    public partial class TestModifyStateInTimeLine
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void CheckBMonoEditConfirmExist()
        {
        	TestFix9_5_2Repository repo = TestFix9_5_2Repository.Instance;
            // TODO: Replace the following line with your code implementation.
            //throw new NotImplementedException();
            String BMonoEditConfirmPath = repo.CWork2021951.HistoryTimelineView.BMonoEditConfirm.GetPath().ToString();
            System.DateTime timeBefore = System.DateTime.Now;  
            Validate.Exists(BMonoEditConfirmPath, 10000);
            System.DateTime timeAfter = System.DateTime.Now;  
            if  ((timeAfter - timeBefore).TotalSeconds>8)
            {
               Report.Failure("too long expected max 8s but " + ((timeAfter - timeBefore).TotalSeconds).ToString() );
			   Report.Log(ReportLevel.Failure, "too long");  	
            }
            else
            {
            	Report.Log(ReportLevel.Info, "CheckBMonoEditConfirmExist expected max 8s : " + 
            	           ((timeAfter - timeBefore).TotalSeconds).ToString());
            }
        }

    }
}
