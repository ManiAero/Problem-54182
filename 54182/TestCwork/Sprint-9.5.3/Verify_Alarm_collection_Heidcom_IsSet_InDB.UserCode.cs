///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Sprint9_5_2
{
    public partial class Verify_Alarm_collection_Heidcom_IsSet_InDB
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void CheckAlarmEventInDb(int EventValue)
        {
        
        	string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\CworkTestAuto\Database\dnc.mdb;User ID=Admin;Password=;";
        	string query = "SELECT cncevtalarmtype FROM cnctable WHERE cncpk = 1";
         	
            Validate_DatabaseFieldWithQuery(connectionString, query, EventValue, "");
         		
         	
        }
		
        public void Validate_DatabaseFieldWithQuery(string OLEConnectionString, string SQLQuery, int expectedValue, string customLogMessage) 
		{ 
		 
			 // check is connection string is empty 
			 if (string.IsNullOrEmpty(OLEConnectionString)) 
			 { 
			 	throw new Ranorex.RanorexException("ConnectionString is empty"); 
			 } 
			 
			 // check if SQL statement is empty 
			 if (SQLQuery.Trim().Equals(string.Empty)) 
			 { 
			 	throw new Ranorex.RanorexException("SQLQuery is empty"); 
			 } 
			 
			 // establish connection to database 
			 using (System.Data.OleDb.OleDbConnection connection = new System.Data.OleDb.OleDbConnection(@OLEConnectionString)) 
			 { 
				 connection.Open(); 
				 
				 System.Data.OleDb.OleDbCommand command = null; 
				 System.Data.OleDb.OleDbDataReader SQLReader = null; 
				 try 
				 { 
					 // set SQL statement and execute search 
					 command = new System.Data.OleDb.OleDbCommand(SQLQuery, connection); 
					 SQLReader = command.ExecuteReader(); 
					 
					 SQLReader.Read(); 
					 
					 // check if there is a result 
					 if (SQLReader.FieldCount > 0) 
					 { 
					 
					 	// retrieve single result from SQL database 
					 	int actualValue = SQLReader.GetInt32(0); 
					 
						 // prepare log message 
						 if (customLogMessage.Trim().Equals(string.Empty)) 
						 { 
						 	//customLogMessage = "Actual value = '{0}', expected value = '{1}' (database query = " + SQLQuery + ")";
						 	customLogMessage = "Actual value = " + actualValue.ToString() +  " expected value = "+ expectedValue.ToString() ;
						 } 
						 
					 	// compare retrieved value with expected value 
					 	if (expectedValue != actualValue) {
					 		Ranorex.Validate.Fail(customLogMessage);
					 	}
					 	//Ranorex.Validate.AreEqual(actualValue, expectedValue, customLogMessage); 
					 } 
					 else 
					 { 
					 	throw new Ranorex.RanorexException(string.Format("SQL statement did not return any results: {0}", SQLQuery)); 
					 } 
				 } 
				 finally 
				 { 
					 command.Dispose(); 
					 SQLReader.Dispose(); 
				 } 
			 } 
		}
    }
}
